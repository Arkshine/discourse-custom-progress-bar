// Settings are passed as strings to sass and we can't use < > operators on them
// This is needed to compare the current and max value of the scrollbar
@function number($string) {
    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
    $numbers: 0 1 2 3 4 5 6 7 8 9;
  
    $result: 0;
  
    @for $i from 1 through str-length($string) {
        $character: str-slice($string, $i, $i);
        $index: index($strings, $character);
      
        @if not $index {
          @warn "Unknown character `#{$character}`.";
          @return false;
        }
      
        $number: nth($numbers, $index);
        $result: $result * 10 + $number;
      }
  
    @return $result;
}

$percentage: round(calc(number($current_value) / number($max_value) * 100));

@function valueDisplay() {
    $value_display: str-replace($value_display, '{current}', $current_value);
    $value_display: str-replace($value_display, '{max}', $max_value);
    $value_display: str-replace($value_display, '{percentage}', $percentage);
    @return $value_display;
}

@function str-replace($string, $search, $replace) {
    $index: str-index($string, $search);
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-slice($string, $index + str-length($search));
    }
    @return $string;
}
$value_display: valueDisplay();

@if $display_on_mobile == "false" {
    .mobile-view .progress-bar-component {
      display: none;
    }
}

// Used to properly format the value display next to the progress bar
@if number($current_value) >= number($max_value) and $hide_when_full == "true" {
    .progress-bar-component {
        display: none;
    }
}

.progress-bar-component {
    display: flex;
    justify-content: center;
}
.progress-bar-wrap {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    width: $progress_bar_width;
    max-width: 100%;
}
.progress-bar-before, .progress-bar-after {
    width: 100%;
}
.progress-bar-data {
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 1;
    margin: .5em 0;
    gap: 0.5em;
}
.progress-bar-container {
    display: flex;
    background: rgba(0,0,0,.2);
    width: 100%;
    height: $progress_bar_height;
    box-shadow: var(--shadow-header);
    border: 1px solid var(--primary-low-mid);
    padding: 3px;
    border-radius: 2px;
}
.progress-status {
    flex: 0 0 auto;
    &:before {
        content: "#{$value_display}";
    }
}
.progress-bar {
    transition: all 1s ease;
    background: if($progress_bar_color == '', hsl(calc($percentage), 100%, 50%), $progress_bar_color); // If empty, creates a dynamic color, from red (0%) to green (100%)
    width: calc($percentage * 1%);
    max-width: 100%;
}

// Rules for different outlets
.above-main-container-outlet {
    & + .progress-bar-component {
        padding-bottom: 1em;
    }
}
.above-site-header-outlet {
    & + .progress-bar-component {
        padding: 0.5em 10px 0;
        background-color: var(--header_background);
    }
}
.below-site-header-outlet {
    & + .progress-bar-component {
        padding: 0.5em 10px 0;
    }
}
#d-sidebar {
    .progress-bar-wrap {
        width: 100%;
        padding: 1em 10px 0;
    }
}
.before-header-panel-progress-bar {
    .progress-bar-wrap {
        width: 100%;
    }
    .progress-bar-before, .progress-bar-after {
        width: auto;
        margin: 0 0.5em;
    }
}